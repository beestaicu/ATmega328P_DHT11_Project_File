
ATmega328P_DHT11_Project_File.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  0000033a  000003ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800118  00800118  000003e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000418  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000458  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d9b  00000000  00000000  000004d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008fb  00000000  00000000  00001273  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000568  00000000  00000000  00001b6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f4  00000000  00000000  000020d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000498  00000000  00000000  000021cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b7  00000000  00000000  00002664  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000291b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e3       	ldi	r30, 0x3A	; 58
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  9e:	0c 94 9b 01 	jmp	0x336	; 0x336 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
uint8_t c=0,I_RH,D_RH,I_Temp,D_Temp,CheckSum,StrRx_flag;
char buffer[10];


ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
	buffer[10]=UDR0;         //Read USART data register
  b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  b6:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <D_RH>
	StrRx_flag=1;        //Set String received flag
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <StrRx_flag>
	
}//end ISR USART
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <Request>:

void Request()						/* Microcontroller send start pulse or request */
{
	DDRC |= (1<<DHT11_PIN);
  cc:	38 9a       	sbi	0x07, 0	; 7
	PORTC &= ~(1<<DHT11_PIN);		/* set to low pin */
  ce:	40 98       	cbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	89 ef       	ldi	r24, 0xF9	; 249
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <Request+0xa>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <Request+0x14>
  e0:	00 00       	nop
	_delay_ms(20);					/* wait for 20ms */
	PORTC |= (1<<DHT11_PIN);		/* set to high pin */
  e2:	40 9a       	sbi	0x08, 0	; 8
  e4:	08 95       	ret

000000e6 <Response>:
	
}

void Response()						/* receive response from DHT11 */
{
	DDRC &= ~(1<<DHT11_PIN);
  e6:	38 98       	cbi	0x07, 0	; 7
	while(PINC & (1<<DHT11_PIN));
  e8:	30 99       	sbic	0x06, 0	; 6
  ea:	fe cf       	rjmp	.-4      	; 0xe8 <Response+0x2>
	while((PINC & (1<<DHT11_PIN))==0);
  ec:	30 9b       	sbis	0x06, 0	; 6
  ee:	fe cf       	rjmp	.-4      	; 0xec <Response+0x6>
	while(PINC & (1<<DHT11_PIN));
  f0:	30 99       	sbic	0x06, 0	; 6
  f2:	fe cf       	rjmp	.-4      	; 0xf0 <Response+0xa>

}
  f4:	08 95       	ret

000000f6 <Receive_data>:

uint8_t Receive_data()							/* receive data */
{
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	90 e0       	ldi	r25, 0x00	; 0
	for (int q=0; q<8; q++)
	{
		while((PINC & (1<<DHT11_PIN)) == 0);	/* check received bit 0 or 1 */
  fa:	30 9b       	sbis	0x06, 0	; 6
  fc:	fe cf       	rjmp	.-4      	; 0xfa <Receive_data+0x4>
  fe:	2f ef       	ldi	r18, 0xFF	; 255
 100:	36 e7       	ldi	r19, 0x76	; 118
 102:	41 e0       	ldi	r20, 0x01	; 1
 104:	21 50       	subi	r18, 0x01	; 1
 106:	30 40       	sbci	r19, 0x00	; 0
 108:	40 40       	sbci	r20, 0x00	; 0
 10a:	e1 f7       	brne	.-8      	; 0x104 <Receive_data+0xe>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <Receive_data+0x18>
 10e:	00 00       	nop
		_delay_ms(30);
		if(PINC & (1<<DHT11_PIN))				/* if high pulse is greater than 30 ms */
 110:	30 9b       	sbis	0x06, 0	; 6
 112:	07 c0       	rjmp	.+14     	; 0x122 <Receive_data+0x2c>
		{c = (c<<1)|(0x01);}					/* then its logic HIGH */
 114:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 118:	22 0f       	add	r18, r18
 11a:	21 60       	ori	r18, 0x01	; 1
 11c:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end>
 120:	05 c0       	rjmp	.+10     	; 0x12c <Receive_data+0x36>
		else		
		{c = (c<<1);}							/* otherwise its logic LOW */
 122:	20 91 18 01 	lds	r18, 0x0118	; 0x800118 <__data_end>
 126:	22 0f       	add	r18, r18
 128:	20 93 18 01 	sts	0x0118, r18	; 0x800118 <__data_end>
		while(PINC & (1<<DHT11_PIN));
 12c:	30 99       	sbic	0x06, 0	; 6
 12e:	fe cf       	rjmp	.-4      	; 0x12c <Receive_data+0x36>
 130:	01 97       	sbiw	r24, 0x01	; 1

}

uint8_t Receive_data()							/* receive data */
{
	for (int q=0; q<8; q++)
 132:	19 f7       	brne	.-58     	; 0xfa <Receive_data+0x4>
		{c = (c<<1)|(0x01);}					/* then its logic HIGH */
		else		
		{c = (c<<1);}							/* otherwise its logic LOW */
		while(PINC & (1<<DHT11_PIN));
	}
	USART_putstring(c);
 134:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
	return c;
	
}
 13e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 142:	08 95       	ret

00000144 <main>:
int main(void)
{
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	00 d0       	rcall	.+0      	; 0x14a <main+0x6>
 14a:	00 d0       	rcall	.+0      	; 0x14c <main+0x8>
 14c:	1f 92       	push	r1
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
	char data[5];
	USART0Init();					/* initialize USART in microcontroller */
 152:	0e 94 3b 01 	call	0x276	; 0x276 <USART0Init>
	sei();							/* enable global interrupt */
 156:	78 94       	sei
	
    while (1) 
    {
		USART_putstring("Humidity =");	/* send string to bluetooth */
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
		
		Request();					/* send start pulse */
 160:	0e 94 66 00 	call	0xcc	; 0xcc <Request>
		Response();					/* receive response */
 164:	0e 94 73 00 	call	0xe6	; 0xe6 <Response>
		I_RH=Receive_data();		/* store first eight bit in I_RH */
 168:	0e 94 7b 00 	call	0xf6	; 0xf6 <Receive_data>
 16c:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <I_RH>
		D_RH=Receive_data();		/* store next eight bit in D_RH */
 170:	0e 94 7b 00 	call	0xf6	; 0xf6 <Receive_data>
 174:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <D_RH>
		I_Temp=Receive_data();		/* store next eight bit in I_Temp */
 178:	0e 94 7b 00 	call	0xf6	; 0xf6 <Receive_data>
 17c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <I_Temp>
		D_Temp=Receive_data();		/* store next eight bit in D_Temp */
 180:	0e 94 7b 00 	call	0xf6	; 0xf6 <Receive_data>
 184:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <D_Temp>
		CheckSum=Receive_data();	/* store next eight bit in CheckSum */
 188:	0e 94 7b 00 	call	0xf6	; 0xf6 <Receive_data>
 18c:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <CheckSum>

		if ((I_RH + D_RH + I_Temp) != CheckSum)
 190:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <I_RH>
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <D_RH>
 19a:	af 01       	movw	r20, r30
 19c:	49 0f       	add	r20, r25
 19e:	51 1d       	adc	r21, r1
 1a0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <I_Temp>
 1a4:	49 0f       	add	r20, r25
 1a6:	51 1d       	adc	r21, r1
 1a8:	28 2f       	mov	r18, r24
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	42 17       	cp	r20, r18
 1ae:	53 07       	cpc	r21, r19
 1b0:	29 f0       	breq	.+10     	; 0x1bc <main+0x78>
		{
			USART_putstring("Error");
 1b2:	8b e0       	ldi	r24, 0x0B	; 11
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
 1ba:	53 c0       	rjmp	.+166    	; 0x262 <main+0x11e>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1bc:	4a e0       	ldi	r20, 0x0A	; 10
 1be:	be 01       	movw	r22, r28
 1c0:	6f 5f       	subi	r22, 0xFF	; 255
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	cf 01       	movw	r24, r30
 1c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <__itoa_ncheck>
		}

		else
		{
			itoa(I_RH,data,10);
			USART_putstring(data);
 1ca:	ce 01       	movw	r24, r28
 1cc:	01 96       	adiw	r24, 0x01	; 1
 1ce:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
			USART_putstring(".");
 1d2:	81 e1       	ldi	r24, 0x11	; 17
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
 1da:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <D_RH>
 1de:	4a e0       	ldi	r20, 0x0A	; 10
 1e0:	be 01       	movw	r22, r28
 1e2:	6f 5f       	subi	r22, 0xFF	; 255
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 66 01 	call	0x2cc	; 0x2cc <__itoa_ncheck>
			
			itoa(D_RH,data,10);
			USART_putstring(data);
 1ec:	ce 01       	movw	r24, r28
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
			USART_putstring("%");
 1f4:	83 e1       	ldi	r24, 0x13	; 19
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
 1fc:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <I_Temp>
 200:	4a e0       	ldi	r20, 0x0A	; 10
 202:	be 01       	movw	r22, r28
 204:	6f 5f       	subi	r22, 0xFF	; 255
 206:	7f 4f       	sbci	r23, 0xFF	; 255
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	0e 94 66 01 	call	0x2cc	; 0x2cc <__itoa_ncheck>
			
			itoa(I_Temp,data,10);
			USART_putstring(data);
 20e:	ce 01       	movw	r24, r28
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
			USART_putstring(".");
 216:	81 e1       	ldi	r24, 0x11	; 17
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
 21e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <D_Temp>
 222:	4a e0       	ldi	r20, 0x0A	; 10
 224:	be 01       	movw	r22, r28
 226:	6f 5f       	subi	r22, 0xFF	; 255
 228:	7f 4f       	sbci	r23, 0xFF	; 255
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 66 01 	call	0x2cc	; 0x2cc <__itoa_ncheck>
			
			itoa(D_Temp,data,10);
			USART_putstring(data);
 230:	ce 01       	movw	r24, r28
 232:	01 96       	adiw	r24, 0x01	; 1
 234:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
			USART_putstring("C ");
 238:	85 e1       	ldi	r24, 0x15	; 21
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
 240:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <CheckSum>
 244:	4a e0       	ldi	r20, 0x0A	; 10
 246:	be 01       	movw	r22, r28
 248:	6f 5f       	subi	r22, 0xFF	; 255
 24a:	7f 4f       	sbci	r23, 0xFF	; 255
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0e 94 66 01 	call	0x2cc	; 0x2cc <__itoa_ncheck>
			
			itoa(CheckSum,data,10);
			USART_putstring(data);
 252:	ce 01       	movw	r24, r28
 254:	01 96       	adiw	r24, 0x01	; 1
 256:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
			USART_putstring(" ");
 25a:	86 e1       	ldi	r24, 0x16	; 22
 25c:	91 e0       	ldi	r25, 0x01	; 1
 25e:	0e 94 56 01 	call	0x2ac	; 0x2ac <USART_putstring>
 262:	2f ef       	ldi	r18, 0xFF	; 255
 264:	89 e6       	ldi	r24, 0x69	; 105
 266:	98 e1       	ldi	r25, 0x18	; 24
 268:	21 50       	subi	r18, 0x01	; 1
 26a:	80 40       	sbci	r24, 0x00	; 0
 26c:	90 40       	sbci	r25, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <main+0x124>
 270:	00 c0       	rjmp	.+0      	; 0x272 <main+0x12e>
 272:	00 00       	nop
 274:	71 cf       	rjmp	.-286    	; 0x158 <main+0x14>

00000276 <USART0Init>:
{
	// Wait for byte to be received
	while(!(UCSR0A&(1<<RXC0))){};
	// Return received data
	return UDR0;
}
 276:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 27a:	87 e6       	ldi	r24, 0x67	; 103
 27c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 280:	e2 ec       	ldi	r30, 0xC2	; 194
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	86 60       	ori	r24, 0x06	; 6
 288:	80 83       	st	Z, r24
 28a:	e1 ec       	ldi	r30, 0xC1	; 193
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	80 81       	ld	r24, Z
 290:	88 61       	ori	r24, 0x18	; 24
 292:	80 83       	st	Z, r24
 294:	80 81       	ld	r24, Z
 296:	80 68       	ori	r24, 0x80	; 128
 298:	80 83       	st	Z, r24
 29a:	08 95       	ret

0000029c <USART0SendByte>:
 29c:	e0 ec       	ldi	r30, 0xC0	; 192
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	90 81       	ld	r25, Z
 2a2:	95 ff       	sbrs	r25, 5
 2a4:	fd cf       	rjmp	.-6      	; 0x2a0 <USART0SendByte+0x4>
 2a6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 2aa:	08 95       	ret

000002ac <USART_putstring>:

void USART_putstring(char* StringPtr){
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	ec 01       	movw	r28, r24
	
	while(*StringPtr != 0x00){
 2b2:	88 81       	ld	r24, Y
 2b4:	88 23       	and	r24, r24
 2b6:	39 f0       	breq	.+14     	; 0x2c6 <USART_putstring+0x1a>
 2b8:	21 96       	adiw	r28, 0x01	; 1
		USART0SendByte(*StringPtr);
 2ba:	90 e0       	ldi	r25, 0x00	; 0
 2bc:	0e 94 4e 01 	call	0x29c	; 0x29c <USART0SendByte>
	return UDR0;
}

void USART_putstring(char* StringPtr){
	
	while(*StringPtr != 0x00){
 2c0:	89 91       	ld	r24, Y+
 2c2:	81 11       	cpse	r24, r1
 2c4:	fa cf       	rjmp	.-12     	; 0x2ba <USART_putstring+0xe>
	StringPtr++;
	
	}
	
	
}
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	08 95       	ret

000002cc <__itoa_ncheck>:
 2cc:	bb 27       	eor	r27, r27
 2ce:	4a 30       	cpi	r20, 0x0A	; 10
 2d0:	31 f4       	brne	.+12     	; 0x2de <__itoa_ncheck+0x12>
 2d2:	99 23       	and	r25, r25
 2d4:	22 f4       	brpl	.+8      	; 0x2de <__itoa_ncheck+0x12>
 2d6:	bd e2       	ldi	r27, 0x2D	; 45
 2d8:	90 95       	com	r25
 2da:	81 95       	neg	r24
 2dc:	9f 4f       	sbci	r25, 0xFF	; 255
 2de:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__utoa_common>

000002e2 <__utoa_ncheck>:
 2e2:	bb 27       	eor	r27, r27

000002e4 <__utoa_common>:
 2e4:	fb 01       	movw	r30, r22
 2e6:	55 27       	eor	r21, r21
 2e8:	aa 27       	eor	r26, r26
 2ea:	88 0f       	add	r24, r24
 2ec:	99 1f       	adc	r25, r25
 2ee:	aa 1f       	adc	r26, r26
 2f0:	a4 17       	cp	r26, r20
 2f2:	10 f0       	brcs	.+4      	; 0x2f8 <__utoa_common+0x14>
 2f4:	a4 1b       	sub	r26, r20
 2f6:	83 95       	inc	r24
 2f8:	50 51       	subi	r21, 0x10	; 16
 2fa:	b9 f7       	brne	.-18     	; 0x2ea <__utoa_common+0x6>
 2fc:	a0 5d       	subi	r26, 0xD0	; 208
 2fe:	aa 33       	cpi	r26, 0x3A	; 58
 300:	08 f0       	brcs	.+2      	; 0x304 <__utoa_common+0x20>
 302:	a9 5d       	subi	r26, 0xD9	; 217
 304:	a1 93       	st	Z+, r26
 306:	00 97       	sbiw	r24, 0x00	; 0
 308:	79 f7       	brne	.-34     	; 0x2e8 <__utoa_common+0x4>
 30a:	b1 11       	cpse	r27, r1
 30c:	b1 93       	st	Z+, r27
 30e:	11 92       	st	Z+, r1
 310:	cb 01       	movw	r24, r22
 312:	0c 94 8b 01 	jmp	0x316	; 0x316 <strrev>

00000316 <strrev>:
 316:	dc 01       	movw	r26, r24
 318:	fc 01       	movw	r30, r24
 31a:	67 2f       	mov	r22, r23
 31c:	71 91       	ld	r23, Z+
 31e:	77 23       	and	r23, r23
 320:	e1 f7       	brne	.-8      	; 0x31a <strrev+0x4>
 322:	32 97       	sbiw	r30, 0x02	; 2
 324:	04 c0       	rjmp	.+8      	; 0x32e <strrev+0x18>
 326:	7c 91       	ld	r23, X
 328:	6d 93       	st	X+, r22
 32a:	70 83       	st	Z, r23
 32c:	62 91       	ld	r22, -Z
 32e:	ae 17       	cp	r26, r30
 330:	bf 07       	cpc	r27, r31
 332:	c8 f3       	brcs	.-14     	; 0x326 <strrev+0x10>
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
